https://blog.csdn.net/afei__/article/details/81201039

Cmake简介
	1、Cmake是一个构建系统，是集软件构建、测试、打包功能于一身的软件。
	2、Cmake特点：跨平台、开源，使用与平台和编译器独立的配置文件来对软件编译过程进行控制。

Cmake常用指令
  	《1》cmake_minimum_required(VERSION 3.4.1)
		可选命令，指定cmake的最小版本。若CMakeLists.txt文件使用了一些高版本cmake命令，
		就需加上这一行，提醒升级cmake版本
	《2》project(demo)
		非强制性命令，设置项目名称。它会引入两个变量demo_BINARY_DIR和demo_SOURCE_DIR，
		同时cmake自动定义了两个等价的变量PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR
	《3》add_executable(demo demo.cpp)			#生成可执行文件，Linux下是demo，windows下是demo.exe
	     add_library(common STATIC util.cpp)	#生成静态库，Linux下是libcommon.a，windows下是common.lib
	     add_library(common SHARED util.cpp)	#生成动态库或共享库Linux下是libcommon.so，windows下是
			add_library默认生成静态库，通过以上命令生成文件名字
	《4》指定编译包含的源文件
	        	《4.1》明确指定包含哪些源文件
	        		add_library(demo demo.cpp test.cpp util.cpp)	#明确指定编译包含哪些源文件
	               	《4.2》搜索所有.cpp文件
	        		aux_source_directory(. SRC_LIST)	#搜索当前目录下的所有源代码文件，并将列表存储在SRC_LIST变量中
	        		add_library(demo ${SRC_LIST})	#指定编译包含的源文件为SRC_LIST变量代表的源代码文件列表
		《4.3》自定义搜索规则
	        		file(GLOB SRC_LIST "*.cpp" "protocol/*.cpp")
			add_library(demo ${SRC_LIST})
				#等价于
			file(GLOB SRC_LIST "*..cpp")
			file(GLOB SRC_PROTOCOL_LIST "protocol/*.cpp")
			add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})
				#等价于
			aux_source_directory(. SRC_LIST)
			aux_source_directory(protocol SRC_PROTOCOL_LIST)
			add_library(demo ${SRC_LIST} ${SRC_PROTOCOL_LIST})
	《5》查找指定库文件
		find_library(VAR name path)	#在path路径下查找name库，将其路径存在VAR变量中
		其他find系列指令
			find_file
			find_path
			find_program
			find_package
	《6》设置包含的目录
		include_directories(
		${CMAKE_CURRENT_SOURCE_DIR}
		${CMAKE_CURRENT_BINARY_DIR}
		${CMAKE_CURRENT_SOURCE_DIR}/include
		)
		linux下还可这样写
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${CMAKE_CURRENT_SOURCE_DIR}")
	《7》设置链接库搜索目录
		link_directories(${CMAKE_CURRENT_SOURCE_DIR}/libs)
		linux下还可这样写
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${CMAKE_CURRENT_SOURCE_DIR}/libs")
	《8》设置target需要链接的库
		概要：
			target_link_libraries(
			#目标库
			demo
			#目标库需要链接的库，VAR是上面find_library指定的变量名
			${VAR}
			)
			linux下会搜索xxx.so或xxx.a文件，若都存在则会优先链接动态库
		《8.1》指定链接动态库或静态库
			target_link_libraries(demo libmylib.a)
			target_link_libraries(demo libmylib.so)
		《8.2》指定链接库全路径
			target_link_libraries(demo ${CMAKE_CURRENT_SOURCE_DIR}/libs/libmylib.a)
		《8.3》指定链接多个库
			target_link_libraries(demo libmylib.a boost_system)
	《9》设置变量
		《9.1》set直接设置变量的值
			set(SRC_LIST main.cpp test.cpp)
		《9.2》set追加设置变量的值
			set(SRC_LIST main.cpp)
			set(SRC_LIST ${SRC_LIST} test.cpp)
		《9.3》list追加或者删除变量的值
			set(SRC_LIST main.cpp)
			list(APPEND SRC_LIST test.cpp)
			list(REMOVE_ITEM SRC_LIST main.cpp)
	《10》条件控制
		《10.1》if...elseif...else...endif
		《10.2》while...endwhile
		《10.3》foreach...endforeach
	《11》打印信息
		message()
	《12》包含其他cmake文件
		include(./common.cmake)	#指定包含文件的全路径
		include(def)			#在搜素路径中搜索def.cmake
		set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)	#设置include的搜索 路径
		
CMAKE常用变量
	《1》预定义变量
		PROJECT_SOURCE_DIR：工程的根目录
		PROJECT_BINARY_DIR：运行cmake命令的目录，通常是 ${PROJECT_SOURCE_DIR}/build
		PROJECT_NAME：返回通过project命令定义的项目名称
		CMAKE_CURRENT_SOURCE_DIR：当前处理的 CMakeLists.txt 所在的路径
		CMAKE_CURRENT_BINARY_DIR：target 编译目录
		CMAKE_CURRENT_LIST_DIR：CMakeLists.txt 的完整路径
		CMAKE_CURRENT_LIST_LINE：当前所在的行
		CMAKE_MODULE_PATH：定义自己的 cmake 模块所在的路径，SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)，然后可以用INCLUDE命令来调用自己的模块
		EXECUTABLE_OUTPUT_PATH：重新定义目标二进制可执行文件的存放位置
		LIBRARY_OUTPUT_PATH：重新定义目标链接库文件的存放位置
	《2》环境变量
		使用环境变量：$ENV{Name}
		写入环境变量：set(ENV{Name} value)
	《3》系统信息
		CMAKE_MAJOR_VERSION：cmake 主版本号，比如 3.4.1 中的 3
		CMAKE_MINOR_VERSION：cmake 次版本号，比如 3.4.1 中的 4
		CMAKE_PATCH_VERSION：cmake 补丁等级，比如 3.4.1 中的 1
		CMAKE_SYSTEM：系统名称，比如 Linux--2.6.22
		CMAKE_SYSTEM_NAME：不包含版本的系统名，比如 Linux
		CMAKE_SYSTEM_VERSION：系统版本，比如 2.6.22
		CMAKE_SYSTEM_PROCESSOR：处理器名称，比如 i686
		UNIX：在所有的类 UNIX 平台下该值为 TRUE，包括 OS X 和 cygwin
		WIN32：在所有的 win32 平台下该值为 TRUE，包括 cygwin
	《4》主要开关选项
		BUILD_SHARED_LIBS：这个开关用来控制默认的库编译方式，如果不进行设置，使用 add_library 又没有指定库类型的情况下，默认编译生成的库都是静态库。如果 set(BUILD_SHARED_LIBS ON) 后，默认生成的为动态库
		CMAKE_C_FLAGS：设置 C 编译选项，也可以通过指令 add_definitions() 添加
		CMAKE_CXX_FLAGS：设置 C++ 编译选项，也可以通过指令 add_definitions() 添加


建议看一下：https://www.cnblogs.com/52php/p/5681745.html
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		